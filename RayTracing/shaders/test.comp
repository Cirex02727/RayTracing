#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (binding = 0) uniform writeonly image2D resultImage;

layout (binding = 1) buffer RGB {
 	float rgb[];
};

struct HitPaylod
{
	float HitDistance;
	vec3 WorldPosition;
	vec3 WorldNormal;

	int ObjectIndex;
};

struct Ray
{
	vec3 Origin;
	vec3 Direction;
};

struct Sphere
{
	vec3 Position;
	float Radius;

	vec3 Albedo;
};

HitPaylod ClosestHit(Ray ray, float hitDistance, Sphere closestSphere)
{
	HitPaylod paylod = HitPaylod(hitDistance, vec3(0), vec3(0), -1);

	vec3 origin = ray.Origin - closestSphere.Position;
	paylod.WorldPosition = origin + ray.Direction * hitDistance;
	paylod.WorldNormal = normalize(paylod.WorldPosition);

	paylod.WorldPosition += closestSphere.Position;

	return paylod;
}

HitPaylod Miss(Ray ray)
{
	return HitPaylod(-1, vec3(0), vec3(0), -1);
}

HitPaylod TraceRay(Ray ray)
{
	// (bx^2 + by^2)t^2 + (2(zxbx + ayby))t + (ax^2 + ay^2 - r^2) = 0
	// where
	// a = ray origin
	// b = ray diraction
	// r = radius
	// t = hit distance

	int closestSphere = -1;
	float hitDistance = 99999999;

	Sphere sphere = Sphere(vec3(0), 0.5, vec3(1.0, 0.0, 0.0));
	vec3 origin = ray.Origin - sphere.Position;

	float a = dot(ray.Direction, ray.Direction);
	float b = 2.0 * dot(origin, ray.Direction);
	float c = dot(origin, origin) - sphere.Radius * sphere.Radius;

	// Quadratic formula discriminant:
	// b^2 - 4ac

	float discriminant = b * b - 4.0 * a * c;
	if (discriminant < 0.0)
		return Miss(ray);

	// Quadratic formula:
	// (-b +- sqrt(discriminant)) / 2a

	//float t0 = (-b + sqrt(discriminant)) / (2.0 * a); // Second hit distance (currently unused)
	float closestT = (-b - sqrt(discriminant)) / (2.0 * a);
	if (closestT > 0.0 && closestT < hitDistance)
	{
		hitDistance = closestT;
		closestSphere = 0;
	}

	if (closestSphere < 0)
		return Miss(ray);

	return ClosestHit(ray, hitDistance, sphere);
}

HitPaylod BoxRay(Ray ray)
{
	vec3 bounds[2] = {
		vec3(0.0), vec3(1.0)
	};
	
	vec3 invDir = vec3(1) / ray.Direction;
	int sign[3] = {
		invDir.x < 0 ? 1 : 0,
		invDir.y < 0 ? 1 : 0,
		invDir.z < 0 ? 1 : 0,
	};

	float tmin = (bounds[sign[0]].x - ray.Origin.x) * invDir.x;
	float tmax = (bounds[1 - sign[0]].x - ray.Origin.x) * invDir.x;
	float tymin = (bounds[sign[1]].y - ray.Origin.y) * invDir.y;
	float tymax = (bounds[1 - sign[1]].y - ray.Origin.y) * invDir.y;

	if ((tmin > tymax) || (tymin > tmax))
		return Miss(ray);

	if (tymin > tmin)
		tmin = tymin;
	if (tymax < tmax)
		tmax = tymax;

	float tzmin = (bounds[sign[2]].z - ray.Origin.z) * invDir.z;
	float tzmax = (bounds[1 - sign[2]].z - ray.Origin.z) * invDir.z;

	if ((tmin > tzmax) || (tzmin > tmax))
		return Miss(ray);

	if (tzmin > tmin)
		tmin = tzmin;
	if (tzmax < tmax)
		tmax = tzmax;


	HitPaylod paylod;
	paylod.HitDistance = 1;
	paylod.ObjectIndex = 0;
	paylod.WorldPosition = vec3(0, 0, 0);
	paylod.WorldNormal = vec3(0, 0, 1);
	return paylod;
}

vec4 PerPixel(vec2 coord, ivec2 size)
{
	coord /= size;
	coord = coord * 2.0 - 1.0; // -1 -> 1
		
	vec4 target = vec4(coord.x, coord.y, 1, 1);
	vec3 rayDirection = vec3(vec4(normalize(vec3(target) / target.w), 0)); // World space

	Ray ray = Ray(vec3(0, 0, -1), rayDirection);

	vec3 color = vec3(0.0);

	float multiplier = 1.0;

	int bounces = 1;
	for (int i = 0; i < bounces; i++)
	{
		HitPaylod paylod = TraceRay(ray);
		// HitPaylod paylod = BoxRay(ray);
		
		if (paylod.HitDistance < 0.0)
		{
			vec3 skyColor = vec3(0.0, 0.0, 0.0);
			color += skyColor * multiplier;
			break;
		}

		vec3 lightDir = normalize(vec3(1, -1, 1));
		float lightIntensity = max(dot(paylod.WorldNormal, -lightDir), 0.0); // == cos(angle)
		
		vec3 sphereColor = vec3(rgb[0], rgb[1], rgb[2]);
		sphereColor *= lightIntensity;
		color += sphereColor * multiplier;

		multiplier *= 0.7f;

		ray.Origin = paylod.WorldPosition + paylod.WorldNormal * 0.0001f;
		ray.Direction = reflect(ray.Direction, paylod.WorldNormal);
	}

	return vec4(color, 1.0);
}

void main()
{
	vec2 coord = vec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(resultImage);

	vec4 color = clamp(PerPixel(coord, size), vec4(0.0), vec4(1.0));

	imageStore(resultImage, ivec2(coord), color);
}
